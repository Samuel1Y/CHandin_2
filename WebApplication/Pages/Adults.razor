@page "/Adults"
@using System.Collections
@using System.ComponentModel.DataAnnotations
@using global::Models
@using WebApplication.Data
@using WebApplication.Models
@using Microsoft.AspNetCore.Mvc.Filters
@using WebApplication.Data.Impl.Adults
@inject IAdults AdultsData
@inject NavigationManager NavMgr
<h3>Adults</h3>
<p>
    Search for: <input type="text" @oninput="@((arg) => FilterByName(arg))" style="width: 200px"/>
</p>
<p>
    Filter by sex:
    <select class="form-control selectpicker" @onchange="@((arg) => FilterBySex(arg))" style="width:100px">
        <option value="null">All</option>
        <option value="F">Female</option>
        <option value="M">Male</option>
        <option value="Non">Non</option>
    </select>
</p>

@if (adultsToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!adultsToShow.Any())
{
    <p>
        <em>No Adults to show. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>User ID</th>
            <th>FirstName</th>
            <th>LastName</th>
            <th>HairColor</th>
            <th>EyeColor</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
            <th>Job Title</th>
            <th>Salary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in adultsToShow)
        {
            <tr>
                <td>@item.id</td>
                <td>@item.firstName</td>
                <td>@item.lastName</td>
                <td>@item.hairColor</td>
                <td>@item.eyeColor</td>
                <td>@item.age</td>
                <td>@item.weight</td>
                <td>@item.height</td>
                <td>@item.sex</td>
                <td>@item.jobTitle.jobTitle</td>
                <td>@item.jobTitle.salary</td>
                <AuthorizeView Policy="MustBeAdmin">
                <td>
                    <button @onclick="@(() => Edit(item.id))">
                        <i class="oi oi-pencil" style="color:#1b6ec2"/>
                    </button>
                </td>
                <td>
                    <button @onclick="@(() => RemoveAdult(item.id))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
                </AuthorizeView>
            </tr>
        }
        </tbody>
    </table>
}


@code {
    private IList<Adult> adultsToShow;
    private IList<Adult> adults;
    private string? filterByName;
    private string? filterBySex;

    private void FilterByName(ChangeEventArgs changeEventArgs)
    {
        filterByName = null;
        try
        {
            filterByName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
        }
        ExecuteFilter();
    }

    private void FilterBySex(ChangeEventArgs args)
    {
        filterBySex = null;
        try
        {
            filterBySex = args.Value.ToString();
            if (filterBySex == "null")
            {
                filterBySex = null;
            }
        }
        catch (Exception e)
        {
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        adultsToShow = adults.Where(t => (filterByName != null && t.GetFullName().ToLower().Contains(filterByName.ToLower()) || filterByName == null) && (filterBySex != null && t.sex == filterBySex || filterBySex == null)).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        adults = await AdultsData.GetAdultsAsync();
        adultsToShow = adults;
    }
    
    private void Edit(int id)
    {
        NavMgr.NavigateTo($"Edit/{id}");
    }

    private void RemoveAdult(int itemId)
    {
        Adult adultToRemove = adults.First(a => a.id == itemId);
        AdultsData.RemoveAdultAsync(itemId);
        adults.Remove(adultToRemove);
        adultsToShow.Remove(adultToRemove);
    }
}